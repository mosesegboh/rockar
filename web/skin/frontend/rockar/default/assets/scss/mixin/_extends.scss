@mixin outer-container {
    @include clearfix;
    max-width: $outer-container-max-width;
    margin: {
        left: auto;
        right: auto;
    }
}

@mixin inner-container {
    @include clearfix;
    max-width: $inner-container-max-width;
    margin: {
        left: auto;
        right: auto;
    }
}

@function font-source-declaration(
    $font-family,
    $file-path,
    $asset-pipeline,
    $file-formats,
    $font-url) {

    $src: ();

    $formats-map: (
        eot: "#{$file-path}.eot?#iefix" format("embedded-opentype"),
        woff2: "#{$file-path}.woff2" format("woff2"),
        woff: "#{$file-path}.woff" format("woff"),
        otf: "#{$file-path}.otf" format("opentype"),
        ttf: "#{$file-path}.ttf" format("truetype"),
        svg: "#{$file-path}.svg##{$font-family}" format("svg")
    );

    @each $key, $values in $formats-map {
        @if contains($file-formats, $key) {
            $file-path: nth($values, 1);
            $font-format: nth($values, 2);

            @if $asset-pipeline == true {
                $src: append($src, font-url($file-path) $font-format, comma);
            } @else {
                $src: append($src, url($file-path) $font-format, comma);
            }
        }
    }

    @return $src;
}

@mixin font-face(
    $font-family,
    $file-path,
    $weight: $fw-normal,
    $style: normal,
    $asset-pipeline: $asset-pipeline,
    $file-formats: eot woff2 woff otf ttf svg) {

    $font-url-prefix: font-url-prefixer($asset-pipeline);

    @font-face {
        font-family: $font-family;
        font-style: $style;
        font-weight: $weight;

        src: font-source-declaration(
                $font-family,
                $file-path,
                $asset-pipeline,
                $file-formats,
                $font-url-prefix
        );
    }
}
